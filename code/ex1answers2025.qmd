---
title: "exercise #1 answers"
author: "Dave Clark"
format: 
   html: default
# tinytable
---
```{r setup, include=FALSE ,echo=FALSE, warning=FALSE, message=FALSE}
options(htmltools.dir.version = FALSE)

knitr::opts_chunk$set(fig.retina = 2, fig.align = "center", warning=FALSE, error=FALSE, message=FALSE) 
  
library(ggplot2)
library(patchwork)
library(tinytable)
library(modelsummary)
library(tidyverse)
library(stargazer)

```

## Q1


```{r}
#| echo: true
#| code-fold: true
#| code-summary: "code" 

xb <- runif(1000, min=-4, max=4)
logitcdf <- plogis(xb)
normalcdf <- pnorm(xb)
logitpdf <- dlogis(xb)
normalpdf <- dnorm(xb)

df <- data.frame(xb, logitcdf, normalcdf, logitpdf, normalpdf)

#cdf  
cdf <- ggplot(data=df, aes(x=xb, y=logitcdf)) +
  geom_line() +
  geom_line(aes(y=normalcdf),  linetype="dotted"  ) +
  annotate("text", x = 2, y = .3, label = "Normal") +
  annotate("text", x = -3, y = .15, label = "Logistic") +
  labs(y="Pr(Y=1)",  x="x") +
  ggtitle("Normal and Logistic CDFs")

pdf <- ggplot(data=df, aes(x=xb, y=logitpdf)) +
  geom_line() +
  geom_line(aes(y=normalpdf), linetype="dotted" ) +
  annotate("text", x = 0, y = .3, label = "Normal") +
  annotate("text", x = -3, y = .1, label = "Logistic") +
  labs(y="Pr(Y=1)", x="x") +
  ggtitle("Normal and Logistic PDFs")


cdf-pdf

```

## Q2 

```{r}
#| echo: true
#| code-fold: true
#| code-summary: "code" 


xb <- runif(1000, min=-4, max=4)
pdf1 <- dnorm(xb, mean=0, sd=1)
pdf2 <- dnorm(xb, mean=0, sd=sqrt(.25))
pdf3 <- dnorm(xb, mean=-1, sd=sqrt(1.25))
pdf4 <- dnorm(xb)

df <- data.frame(xb, pdf1, pdf2, pdf3, pdf4)

ggplot(data=df, aes(x=xb, y=pdf1)) +
  geom_line() +
  geom_line(aes(y=pdf2), linetype="dotted") +
  geom_line(aes(y=pdf3), linetype="longdash" ) +
  annotate("text", x = 2.5, y = .1, label = "Normal (0,1)") +
  annotate("text", x = 1.5, y = .4, label = "Normal (0, .25)") +
  annotate("text", x = -3.3, y = .2, label = "Normal (-1, 1.25)") +
  labs(y="Pr(Y=1)", x="x") +
  ggtitle("Normal PDFs")

```

# Q3

### Null model

```{r, results='asis'}
#| echo: true
#| code-fold: true
#| code-summary: "code" 

data <- c(-1.21,	0 ,	-.31,
-.216,	0	,.92,
-2.74,	1	,-1.19, 
.429, 1	 , 2.40 ,
-.40,	1 ,  	.62 ,
-1.42,	0	,-.54,
-1.14,	0	,-2.35,
-.74,	0	,-.137)

dm <- matrix(data, nrow=8, ncol=3, byrow=TRUE)
colnames(dm) <- c('x2','x1','y')

df <- as.data.frame(dm)

m0 <- lm(data=df, y ~ 1)
#modelsummary(m1)

stargazer(m0, type="html")



```

### Bivariate model 

```{r, results='asis'}
#| echo: true
#| code-fold: true
#| code-summary: "code" 


### one var only 
m1 <- lm(data=df, y ~ x2)
stargazer(m1, type="html")

```


### $\widehat{y}$
```{r}
#| echo: true
#| code-fold: true
#| code-summary: "code" 


fit1 <- predict(m1, interval="confidence", se.fit=TRUE)
predictions <- cbind(df, fit1)
predictions$res <- predictions$y-predictions$fit.fit

ggplot(predictions, aes(x = x2, y = fit.fit)) +
  geom_line() +
  geom_point(aes(x=x2, y=y))+
  labs(x="x2", y="predicted y")

```

### Residuals

```{r}
#| echo: true
#| code-fold: true
#| code-summary: "code" 
#predictions$res <- predictions$y - predictions$fit.fit

ggplot(predictions, aes(x = x2, y = fit.fit)) +
  geom_line() +
  geom_point(aes(x=x2, y=y)) +
  geom_segment(aes(x=x2, y=y, xend=x2, yend=fit.fit), linetype=2)+
  labs(x="x2", y="predicted y")

```


### Multivariate model

```{r, results='asis'}
#| echo: true
#| code-fold: true
#| code-summary: "code" 


m2 <- lm(data=df, y ~ x1 + x2)
stargazer(m2, type="html")

```

### $\widehat{y}$

```{r}
#| echo: true
#| code-fold: true
#| code-summary: "code" 

dfavg <- df 

for (i in 0:1){
  dfavg$x1 = i
  fit <- data.frame(predict(m2, interval="confidence", se.fit=TRUE, newdata=dfavg))
  dfavg <- cbind(dfavg, fit$fit.fit)
  names(dfavg)[ncol(dfavg)] <- paste0("yhat", i)
}

ggplot() +
  geom_line(data=dfavg, aes(x = x2, y = yhat1)) +
  geom_line(data=dfavg, aes(x=x2, y=yhat0))+
  annotate("text", x = -.5, y = 1.5, label = "x1=1") +
  annotate("text", x = -1, y = -1, label = "x1=0") +
  labs(x="x2", y="predicted y")

```

# Q4 Taylor & Mick

```{r}
#| echo: true
#| code-fold: true
#| code-summary: "code" 

beats <- read.csv("beats.csv")

#summarize  
bsum <- subset(beats, select = c(artist_name, album_release_year, danceability, energy, loudness, 
                                 valence, time_signature, duration_ms, album_name, key_name,
                                 mode_name, key_mode))

datasummary(All(bsum) ~ Mean + SD + Median + Min + Max,
            data = bsum)
```


### Danceability over time - linearity

Regress danceability on year for each artist.

```{r, results='asis'}
#| echo: true
#| code-fold: true
#| code-summary: "code"

# modeling danceability over time for each artist

tsreg <- lm(data=bsum%>%filter(artist_name=="Taylor Swift"), danceability ~ album_release_year)

#rolling stones

rsreg <- lm(data=bsum%>%filter(artist_name=="The Rolling Stones"), danceability ~ album_release_year)

#stargazer, label model 1 as Taylor Swift, model 2 as Rolling Stones

stargazer(tsreg, rsreg, type="html", title="Danceability over time", column.labels = c("Taylor", "Stones"))
```

#### Predictions over time    
```{r}
#| echo: true
#| code-fold: true
#| code-summary: "code"

#plot predictions over year for both artists

tsfit <- data.frame(predict(tsreg, interval="confidence", se.fit=TRUE))
rsfit <- data.frame(predict(rsreg, interval="confidence", se.fit=TRUE))

ts <- cbind(bsum%>%filter(artist_name=="Taylor Swift"), tsfit)

rs <- cbind(bsum%>%filter(artist_name=="The Rolling Stones"), rsfit)

ggplot() +
  geom_line(data=ts, aes(x = album_release_year, y = fit.fit)) +
  geom_line(data=rs, aes(x=album_release_year, y=fit.fit), linetype="dotted")+
  annotate("text", x = 2010, y = .6, label = "Taylor Swift") +
  annotate("text", x = 1985, y = .5, label = "The Rolling Stones") +
  labs(x="Year", y="Predicted Danceability")

```


### Danceability over time - relaxing linearity

Let's use dummies for years to relax linearity.


```{r, results='asis'}
#| echo: true
#| code-fold: true
#| code-summary: "code" 

# modeling danceability over time for each artist

#taylor swift
tsregf <- lm(data=bsum%>%filter(artist_name=="Taylor Swift"), danceability ~ as.factor(album_release_year))
#stones
rsregf <- lm(data=bsum%>%filter(artist_name=="The Rolling Stones"), danceability ~ as.factor(album_release_year))

stargazer(tsregf, rsregf, type="html", title="Danceability over time", column.labels = c("Taylor", "Stones"))
```


Compared to her first release, it appears TS has gotten generally more danceable since 2012. The Stones have generally been as danceable or less so since their first album. 



```{r}
#| echo: true
#| code-fold: true
#| code-summary: "code" 


#plot predictions from factor variable models over year

tsfitf <- data.frame(predict(tsregf, interval="confidence", se.fit=TRUE))
rsfitf <- data.frame(predict(rsregf, interval="confidence", se.fit=TRUE))
tsf <- cbind(bsum%>%filter(artist_name=="Taylor Swift"), tsfitf)
rsf <- cbind(bsum%>%filter(artist_name=="The Rolling Stones"), rsfitf)

ggplot() +
  geom_line(data=tsf, aes(x = album_release_year, y = fit.fit)) +
  geom_line(data=rsf, aes(x=album_release_year, y=fit.fit), linetype="dotted")+
  annotate("text", x = 2010, y = .6, label = "Taylor Swift") +
  annotate("text", x = 1985, y = .5, label = "The Rolling Stones") +
  labs(x="Year", y="Predicted Danceability")
```


#### Danceability densities

```{r}
#| echo: true
#| code-fold: true
#| code-summary: "code" 


#plot avg dancability 

ggplot() +
  geom_density(data=bsum%>%filter(artist_name=="Taylor Swift"), aes(x=danceability))+
  geom_density(data=bsum%>%filter(artist_name=="The Rolling Stones"), aes(x=danceability), linetype="dotted") +
  annotate("text", x=.18, y=2, label="Stones")+
  annotate("text", x=.45, y=3.5, label="Taylor") +
  labs(x="Danceability" , y="Density")





```



### Artists over time

### Median Danceability over year 

```{r}
#| echo: true
#| code-fold: true
#| code-summary: "code" 


# gen avg danceability by year for plot 
bsum <- beats %>% group_by(album_release_year) %>% mutate(avg= mean(danceability))

#plot avg dancability over album release year, facet by artist

ggplot(data=bsum, aes(x=album_release_year, y=avg)) +
  geom_linerange(aes(x=album_release_year, ymin=0, ymax=avg),
                 color="#005A43", size=1.5) +
  facet_wrap(~artist_name) +
  labs(x="Album Release Year", y="Average Danceability")


```

### Median and Range of Danceability over release date
```{r}
#| echo: true
#| code-fold: true
#| code-summary: "code" 

#format album release date as a day

bsum$album_release_date <- as.Date(bsum$album_release_date)

#plot avg dancability over album release date, facet by artist
unique_dates <- unique(bsum$album_release_date)
library(ggplot2)
library(dplyr) # For data manipulation

# Assuming bsum$album_release_date is already a Date object

# Calculate summary statistics for each date
bsum_summary <- bsum %>%
  group_by(album_release_date, artist_name) %>% # Group by both date and artist
  summarize(
    median_danceability = median(danceability),
    min_danceability = min(danceability),
    max_danceability = max(danceability)
  )


ggplot(data = bsum_summary, aes(x = album_release_date, y = median_danceability), color="#005A43") +
  geom_point() + 
  geom_errorbar(aes(ymin = min_danceability, ymax = max_danceability), width = 0.2, color="#6CC24A") + 
 facet_wrap(~factor(artist_name, levels = c("The Rolling Stones", "Taylor Swift"))) +
  labs(x = "Album Release Date", y = "Median Danceability") +
  scale_x_date(breaks = unique(bsum_summary$album_release_date), date_labels = "%Y-%m-%d") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size=5))

```

### Trends in Danceability


Borrowing Mary L's idea, plot local regression estimates:

```{r}
#| echo: true
#| code-fold: true
#| code-summary: "code" 


#plot  dancability over time

ggplot() +
  geom_smooth(data=bsum%>%filter(artist_name=="Taylor Swift"), aes(y=danceability, x=album_release_year), color="#005A43") +
  geom_smooth(data=bsum%>%filter(artist_name=="The Rolling Stones"), aes(y=danceability, x=album_release_year), color="#005A43") +
  annotate("text", x=1980, y=.6, label="Stones")+
  annotate("text", x=2017, y=.55, label="Taylor") +
  labs(x="Years" , y="Danceability")

```

### Who is more danceable? 

Simple regression - is one artist's music more danceable than the other - dummy variable for the Rolling Stones.

```{r, results='asis'}
#| echo: true
#| code-fold: true
#| code-summary: "code" 

d <- lm(data=bsum, danceability ~ as.factor(artist_name))
stargazer(d, type="html")


```

The Stones are statistically less danceable than Taylor Swift is.

